<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on glumia's blog</title><link>https://glumia.dev/tags/python/</link><description>Recent content in Python on glumia's blog</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Sun, 21 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://glumia.dev/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Clojure, Python, C: three programming languages, one algorithm</title><link>https://glumia.dev/blog/clojure-python-c-three-programming-languages-one-algorithm/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://glumia.dev/blog/clojure-python-c-three-programming-languages-one-algorithm/</guid><description>&lt;p>&lt;img src="https://glumia.dev/blog/clojure-python-c-three-programming-languages-one-algorithm/comparison.png" alt="image">&lt;/p>
&lt;p>Too lazy to write something long and well thought now &lt;code>¯\_(ツ)_/¯&lt;/code>&lt;/p>
&lt;p>Just a bit disappointed by how bad Clojure&amp;rsquo;s performance are (&lt;em>but hey,
immutability is not free!&lt;/em>) and by how damn difficult it is to improve them.&lt;/p>
&lt;h4 id="update-230620">Update 23/06/20&lt;/h4>
&lt;p>I found out that the timing of the C version goes down to ~~~2ms~~ ~145ms if I just
declare the variables as &lt;em>int&lt;/em> and not &lt;em>unsigned int&lt;/em>. That&amp;rsquo;s amazing!&lt;/p>
&lt;h4 id="update-090121">Update 09/01/21&lt;/h4>
&lt;p>Half I year later I finally know why the version with signed integers actually
takes less than the version with unsigned ints.&lt;/p></description></item><item><title>The Levenshtein Distance</title><link>https://glumia.dev/blog/the-levenshtein-distance/</link><pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate><guid>https://glumia.dev/blog/the-levenshtein-distance/</guid><description>&lt;p>It&amp;rsquo;s fascinating how every problem you can think of in computer science 9 times out of
10 was already tackled and solved by someone else. Today I was thinking about a
way to suggest corrections for addresses inserted by our customers when I started to
imagine an algorithm that used the mathematical notion of &amp;lsquo;distance&amp;rsquo; (check &amp;lsquo;Metric
(mathematics)&amp;rsquo; on Wikipedia &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> ) to give them some suggestions based on a set of valid
addresses present on our DB. Well, now I find out that it&amp;rsquo;s a well-known problem in
computer science, that a wide range of algorithms&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> has already been designed to solve
it and that what I had in my mind was a variation of the Levenshtein distance!&lt;/p></description></item><item><title>GOG Store - Overkill search</title><link>https://glumia.dev/blog/gog-store-overkill-search/</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><guid>https://glumia.dev/blog/gog-store-overkill-search/</guid><description>&lt;p>&lt;img src="https://glumia.dev/blog/gog-store-overkill-search/gogemail.png" alt="image">&lt;/p>
&lt;p>I had 1.30 euro remaining on my GOG wallet and I had to use them before Sept. 19 or they
would expire. I started to look for a game but store&amp;rsquo;s search engine didn&amp;rsquo;t allow me to
filter them for a price in a custom range. I could only search for games whose
price was less than 5 euros, and this still yield to 530 results. Too many to
check them one by one. Given that I&amp;rsquo;m lazy I worked my way out to automate the search
using the GOG API and a simple Python script.&lt;/p></description></item></channel></rss>