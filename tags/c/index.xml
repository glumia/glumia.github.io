<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on glumia's blog</title><link>https://glumia.dev/tags/c/</link><description>Recent content in C on glumia's blog</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Sun, 21 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://glumia.dev/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>Clojure, Python, C: three programming languages, one algorithm</title><link>https://glumia.dev/blog/clojure-python-c-three-programming-languages-one-algorithm/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://glumia.dev/blog/clojure-python-c-three-programming-languages-one-algorithm/</guid><description>&lt;p>&lt;img src="https://glumia.dev/blog/clojure-python-c-three-programming-languages-one-algorithm/comparison.png" alt="image">&lt;/p>
&lt;p>Too lazy to write something long and well thought now &lt;code>¯\_(ツ)_/¯&lt;/code>&lt;/p>
&lt;p>Just a bit disappointed by how bad Clojure&amp;rsquo;s performance are (&lt;em>but hey,
immutability is not free!&lt;/em>) and by how damn difficult it is to improve them.&lt;/p>
&lt;h4 id="update-230620">Update 23/06/20&lt;/h4>
&lt;p>I found out that the timing of the C version goes down to ~~~2ms~~ ~145ms if I just
declare the variables as &lt;em>int&lt;/em> and not &lt;em>unsigned int&lt;/em>. That&amp;rsquo;s amazing!&lt;/p>
&lt;h4 id="update-090121">Update 09/01/21&lt;/h4>
&lt;p>Half I year later I finally know why the version with signed integers actually
takes less than the version with unsigned ints.&lt;/p></description></item><item><title>C and Assembly - Subtleties</title><link>https://glumia.dev/blog/c-and-assembly-subtleties/</link><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><guid>https://glumia.dev/blog/c-and-assembly-subtleties/</guid><description>&lt;h3 id="should-i-write-this">Should I write this&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C" data-lang="C">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">flag&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>		&lt;span style="color:#8f5902;font-style:italic">// Boolean value, can only be 0 or 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">while&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">some_condition&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// …
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">flag&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">flag&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// …
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="or">or&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C" data-lang="C">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">flag&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">while&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">some_condition&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// …
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">flag&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// …
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="what-performs-better">what performs better?&lt;/h3>
&lt;p>While I was writing some C code I came up to this little question. In a while loop at a
certain point we have to set a boolean flag&amp;rsquo;s value to 1. So, should we check it&amp;rsquo;s value
first and eventually assign it to 1 or just assign it to 1 without checking
first?&lt;/p></description></item></channel></rss>