<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>glumia's blog</title><link>https://glumia.dev/</link><description>Recent content on glumia's blog</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Fri, 04 Jul 2025 21:37:23 +0200</lastBuildDate><atom:link href="https://glumia.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://glumia.dev/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glumia.dev/about/</guid><description>&lt;p>Software engineer specialised in backend web development.&lt;/p>
&lt;p>I like command line interfaces, unix-like operating systems, C, Go, Python, lisps,
vim, and well written code or documentation.&lt;/p></description></item><item><title>Injecting instructions into LLMs</title><link>https://glumia.dev/blog/injecting-instructions-into-llms/</link><pubDate>Fri, 04 Jul 2025 21:37:23 +0200</pubDate><guid>https://glumia.dev/blog/injecting-instructions-into-llms/</guid><description>&lt;ol>
&lt;li>&lt;a href="https://github.com/glumia/glumia-blog-files/commit/8d7d7026325535ecf2666e8f2a4a028ac17a964b">Add some nicely formatted instructions that aren&amp;rsquo;t visible to humans to your webpage&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://glumia.dev/blog/injecting-instructions-into-llms/html-snippet.png" alt="instruction injection snippet">&lt;/p>
&lt;ol start="2">
&lt;li>Wait for LLMs to stumble on it&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://glumia.dev/blog/injecting-instructions-into-llms/llm-parsing-html.png" alt="llm stubles on the web page">&lt;/p>
&lt;ol start="3">
&lt;li>Profit&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://glumia.dev/blog/injecting-instructions-into-llms/llm-executes-the-injected-instruction.png" alt="llm executes the instruction">&lt;/p>
&lt;p>What if the page was a legit looking blog post about some technical topic and
the LLM a coding agent running on a developer&amp;rsquo;s machine with access to the
local environment?&lt;/p>
&lt;p>What if this was a product&amp;rsquo;s website, and the user was asking to compare it to
some competitors?&lt;/p></description></item><item><title>Peeking into AI coding agents</title><link>https://glumia.dev/blog/peeking-into-ai-coding-agents/</link><pubDate>Sat, 03 May 2025 00:27:52 +0200</pubDate><guid>https://glumia.dev/blog/peeking-into-ai-coding-agents/</guid><description>&lt;p>I&amp;rsquo;ve had a bit of free time in the past few days and I&amp;rsquo;ve been reading about AI
coding agents.&lt;/p>
&lt;p>It looks like in the end it&amp;rsquo;s mostly sophisticated wrappers around LLMs, with the
main advantage being access to tools they can use to gather more information or
execute actions.&lt;/p>
&lt;p>These are all just plain text: you tell the LLM how to communicate if it wants
to use a tool, then when requested you run them and feed back their output.&lt;/p></description></item><item><title>Thinking about software quality</title><link>https://glumia.dev/blog/thinking-about-software-quality/</link><pubDate>Sun, 27 Nov 2022 12:03:42 +0100</pubDate><guid>https://glumia.dev/blog/thinking-about-software-quality/</guid><description>&lt;p>&lt;a href="https://xkcd.com/2030/">&lt;img src="https://imgs.xkcd.com/comics/voting_software.png" alt="Voting Software">&lt;/a>&lt;/p>
&lt;p>I found myself thinking about software quality this morning.&lt;/p>
&lt;p>Quality as in reliable software you can depend on.&lt;/p>
&lt;p>Life is complex, we all have tons of things to worry about, and our software
not working as it&amp;rsquo;s supposed to shouldn&amp;rsquo;t be one of those.&lt;/p>
&lt;p>Error handling, thinking about what could go wrong, trying to recover, retrying,
or, ultimately, letting users know about the error in a way they can understand and act
on, are things that we often overlook.&lt;/p></description></item><item><title>Bite Size Linux</title><link>https://glumia.dev/blog/bite-size-linux/</link><pubDate>Sun, 24 Apr 2022 17:32:09 +0200</pubDate><guid>https://glumia.dev/blog/bite-size-linux/</guid><description>&lt;p>Some notes about questions that came to my mind while reading Julia Evans&amp;rsquo; zine
&lt;em>Bite Size Linux&lt;/em>.&lt;/p>
&lt;p>&lt;a href="#what-are-the-setuid-setgid-and-sticky-bits-of-a-file">What are the setuid, setgid and sticky bits of a file?&lt;/a>&lt;br>
&lt;a href="#whats-inside-procpidstack">What&amp;rsquo;s inside /proc/PID/stack?&lt;/a>&lt;br>
&lt;a href="#why-would-i-want-to-use-mkfifo-named-pipes">Why would I want to use mkfifo? (named pipes)&lt;/a>&lt;br>
&lt;a href="#what-are-unix-domain-sockets-and-why-would-i-want-to-use-them">What are Unix domain sockets and why would I want to use them?&lt;/a>&lt;br>
&lt;a href="#can-i-see-a-process-registered-signal-handlers-from-procpid">Can I see a process&amp;rsquo; registered signal handlers from /proc/PID?&lt;/a>&lt;br>
&lt;a href="#what-is-a-memory-allocator-can-i-write-one-by-myself">What is a memory allocator? Can I write one by myself?&lt;/a>&lt;br>
&lt;a href="#what-is-ldd">What is ldd?&lt;/a>&lt;br>
&lt;a href="#what-is-the-difference-between-the-fork-and-the-clone-system-calls">What is the difference between the fork and the clone system calls?&lt;/a>&lt;br>
&lt;a href="#what-is-mmap-what-happens-if-two-different-processes-mmap-the-same-file">What is mmap? What happens if two different processes mmap the same file?&lt;/a>&lt;br>
&lt;a href="#what-is-man-6-sl">What is &lt;code>man 6 sl&lt;/code>?&lt;/a>&lt;/p></description></item><item><title>Random thoughts on Software Engineering and Science</title><link>https://glumia.dev/blog/random-thoughts-on-software-engineering-and-science/</link><pubDate>Fri, 23 Jul 2021 19:06:35 +0200</pubDate><guid>https://glumia.dev/blog/random-thoughts-on-software-engineering-and-science/</guid><description>&lt;p>The other day I was randomly reading some stuff on lobste.rs, when I found this post &lt;a href="https://lobste.rs/s/9n7aic/what_i_learned_from_software_engineering">&lt;em>&amp;ldquo;What I learned from Software Engineering at Google&amp;rdquo;&lt;/em>&lt;/a>. As I usually do, I skimmed through the comments and decided to stop there - more often than not it&amp;rsquo;s enough information to decide if a full read is worth it or not. I know, that&amp;rsquo;s not an infallible heuristic, but our time in this world is limited and I can&amp;rsquo;t keep up with everything that&amp;rsquo;s on the web, even if I would like to.&lt;/p></description></item><item><title>Codility - Part 1 (and probably last, until I'll get back to job hunting)</title><link>https://glumia.dev/blog/codility-part-1-and-probably-last-until-ill-get-back-to-job-hunting/</link><pubDate>Sat, 03 Apr 2021 13:17:05 +0200</pubDate><guid>https://glumia.dev/blog/codility-part-1-and-probably-last-until-ill-get-back-to-job-hunting/</guid><description>&lt;p>Lately I&amp;rsquo;ve been looking for materials to practice for code interviews and a
friend of mine pointed out &lt;a href="https://app.codility.com/programmers/lessons/1-iterations/">Codility&amp;rsquo;s lessons&lt;/a> to me.
Their web site and application are still a bit in the early stages (imho they
are not as mature as other sites like HackerRank or CodinGame) but one
really nice thing that the others lack is the reading material they provide
for each topic.&lt;/p>
&lt;p>I plan to go through the lessons (at least 1 to 17) in the following
days/weeks and I&amp;rsquo;ll write random thoughts that arise while working on them
here in the blog.&lt;/p></description></item><item><title>Clojure, Python, C: three programming languages, one algorithm</title><link>https://glumia.dev/blog/clojure-python-c-three-programming-languages-one-algorithm/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://glumia.dev/blog/clojure-python-c-three-programming-languages-one-algorithm/</guid><description>&lt;p>&lt;img src="https://glumia.dev/blog/clojure-python-c-three-programming-languages-one-algorithm/comparison.png" alt="image">&lt;/p>
&lt;p>Too lazy to write something long and well thought now &lt;code>¯\_(ツ)_/¯&lt;/code>&lt;/p>
&lt;p>Just a bit disappointed by how bad Clojure&amp;rsquo;s performance are (&lt;em>but hey,
immutability is not free!&lt;/em>) and by how damn difficult it is to improve them.&lt;/p>
&lt;h4 id="update-230620">Update 23/06/20&lt;/h4>
&lt;p>I found out that the timing of the C version goes down to ~~~2ms~~ ~145ms if I just
declare the variables as &lt;em>int&lt;/em> and not &lt;em>unsigned int&lt;/em>. That&amp;rsquo;s amazing!&lt;/p>
&lt;h4 id="update-090121">Update 09/01/21&lt;/h4>
&lt;p>Half I year later I finally know why the version with signed integers actually
takes less than the version with unsigned ints.&lt;/p></description></item><item><title>The Levenshtein Distance</title><link>https://glumia.dev/blog/the-levenshtein-distance/</link><pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate><guid>https://glumia.dev/blog/the-levenshtein-distance/</guid><description>&lt;p>It&amp;rsquo;s fascinating how every problem you can think of in computer science 9 times out of
10 was already tackled and solved by someone else. Today I was thinking about a
way to suggest corrections for addresses inserted by our customers when I started to
imagine an algorithm that used the mathematical notion of &amp;lsquo;distance&amp;rsquo; (check &amp;lsquo;Metric
(mathematics)&amp;rsquo; on Wikipedia &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> ) to give them some suggestions based on a set of valid
addresses present on our DB. Well, now I find out that it&amp;rsquo;s a well-known problem in
computer science, that a wide range of algorithms&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> has already been designed to solve
it and that what I had in my mind was a variation of the Levenshtein distance!&lt;/p></description></item><item><title>C and Assembly - Subtleties</title><link>https://glumia.dev/blog/c-and-assembly-subtleties/</link><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><guid>https://glumia.dev/blog/c-and-assembly-subtleties/</guid><description>&lt;h3 id="should-i-write-this">Should I write this&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C" data-lang="C">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">flag&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>		&lt;span style="color:#8f5902;font-style:italic">// Boolean value, can only be 0 or 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">while&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">some_condition&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// …
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">flag&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">flag&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// …
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="or">or&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C" data-lang="C">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">flag&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">while&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">some_condition&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// …
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">flag&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// …
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="what-performs-better">what performs better?&lt;/h3>
&lt;p>While I was writing some C code I came up to this little question. In a while loop at a
certain point we have to set a boolean flag&amp;rsquo;s value to 1. So, should we check it&amp;rsquo;s value
first and eventually assign it to 1 or just assign it to 1 without checking
first?&lt;/p></description></item><item><title>GOG Store - Overkill search</title><link>https://glumia.dev/blog/gog-store-overkill-search/</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><guid>https://glumia.dev/blog/gog-store-overkill-search/</guid><description>&lt;p>&lt;img src="https://glumia.dev/blog/gog-store-overkill-search/gogemail.png" alt="image">&lt;/p>
&lt;p>I had 1.30 euro remaining on my GOG wallet and I had to use them before Sept. 19 or they
would expire. I started to look for a game but store&amp;rsquo;s search engine didn&amp;rsquo;t allow me to
filter them for a price in a custom range. I could only search for games whose
price was less than 5 euros, and this still yield to 530 results. Too many to
check them one by one. Given that I&amp;rsquo;m lazy I worked my way out to automate the search
using the GOG API and a simple Python script.&lt;/p></description></item><item><title>Reading list</title><link>https://glumia.dev/reading_list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glumia.dev/reading_list/</guid><description>&lt;h4 id="some-blogs-i-like">Some blogs I like&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://danluu.com">https://danluu.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jvns.ca">https://jvns.ca&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://drewdevault.com">https://drewdevault.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.brendangregg.com/blog">https://www.brendangregg.com/blog&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://nullprogram.com">https://nullprogram.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://scattered-thoughts.net">https://scattered-thoughts.net&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="books">Books&lt;/h4>
&lt;p>Some (tech) books that I have read, am currently reading or considering reading
in the future.&lt;/p>
&lt;p>Read:&lt;/p>
&lt;ul>
&lt;li>The C Programming Language - D. Ritchie, B. Kernighan&lt;/li>
&lt;li>The Mythical Man-Month - F. Brooks&lt;/li>
&lt;li>Fluent Python - L. Ramalho&lt;/li>
&lt;li>The Pragmatic Programmer - D. Thomas, A. Hunt&lt;/li>
&lt;li>Clojure for the Brave and True - D. Higginbotham&lt;/li>
&lt;li>How to Solve It - G. Pólya&lt;/li>
&lt;li>A Philosophy of Software Design - J. Ousterhout&lt;/li>
&lt;li>Computer Networking, A Top-Down Approach - Kurose, Ross&lt;/li>
&lt;li>The Practice of Programming - B. Kernighan, R. Pike&lt;/li>
&lt;li>Ultimate Go - W. Kennedy&lt;/li>
&lt;/ul>
&lt;p>Queue:&lt;/p></description></item></channel></rss>